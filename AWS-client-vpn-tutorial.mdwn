# Create Your Private OpenVPN Service with AWS Client VPN Endpoint

In this article, I am going to teach you how to create your own private OpenVPN service with AWS Client VPN Endpoint.

## What are AWS and AWS Client VPN Endpoint?

Amazon Web Service(AWS) is a cloud computing platform by Amazon founded in 2006. It is now one of the largest and most popular cloud computing platforms in the world. It provides a variety of services like Virtual Machine, Managed Database, etc.

One of the services being provided by AWS is Client VPN Endpoint. It helps to create an endpoint to which you can directly access the resources(like virtual machines) within a VPC via an OpenVPN connection to the designated subnet.

**However, with some modifications to the configuration, we can turn that service into a working VPN server that allows us to anonymously access the public internet with** ***incredible performance!*** The figure below briefly explains how the client VPN endpoint intends to work.   

![how aws client vpn endpoint works](https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/images/architecture.png)

## Step 1 : Create an AWS Account

> If you already have a working AWS account, you can skip to [Step 3](#Step-4-:-Navigate-to-Client-VPN-Endpoint).

So the first step would be creating an AWS account. We need to have a working AWS account to create resources on the platform. Go to [the sign-up website](https://portal.aws.amazon.com/billing/signup#/start) to create a free account. 

![the sign-up website](aws-signup.png)

> Note that by creating a free AWS account, you are automatically granted free access to some of its services for the first year following the sign-up date. Go to [this page](https://aws.amazon.com/free) to get more information. Fill in the information forms as instructed. 

## Step 2 : Sign in to the Console with your AWS account

Sign in to the AWS Management Console with the account you just created on [on this page](https://console.aws.amazon.com/). Select **"Root User"** and enter the email address, then click "Next". Enter the password on the following page and click "Sign in".

![the sign-in page](aws-signin.png)

You should be on this page after signing in. This is the main page of the AWS Management Console where you can find the index of all the services on this platform.

![AWS Management Console](aws-management-console.png)

## Step 3 : Select the Region in which You Want to Set up Your Service

Please notice that most of the AWS services are regional-independent. That means that two services of the same particular kind in two different regions are completely isolated. The same applies to the Client VPN Endpoints. So we need to decide which region you want you deploy your service to. 

> Note that not all AWS regions provide Client VPN Endpoints.

### The AWS Regions where Client VPN Endpoints are Available

- US East (N. Virginia)
- US East (Ohio)
- US West (N. California)
- US West (Oregon)
- Asia Pacific (Mumbai)
- Asia Pacific (Seoul)
- Aisa Pacific (Singapore)
- Aisa Pacific (Sydney)
- Asia Pacific (Tokyo)
- Canada (Central)
- Europe (Frankfurt)
- Europe (Ireland)
- Europe (London)
- Europe (Stockholm)

And you can select the region from the list bar at the top right corner. Please do this **BEFORE** creating the endpoint.

![Select the region you prefer](region-selection.png)

### **How to select a region for your VPN Service?**

Usually, it highly depends on your current geolocation and that of the destination you want to access. For example, I am now living in Canada and wanting to access a Japanese video website that is exclusive to users in Japan. In that case, I would certainly select Asia Pacific (Tokyo) as my VPN region. 

Also, for a lot of Chinese users, the VPN is used to bypass the [GFW](https://en.wikipedia.org/wiki/Great_Firewall)(Great Firewall). So simply all the regions are suitable for this scenario, as the ones closer to China may have lower latencies. 

For simply encrypting the web traffic, the endpoint that is closest to you would be ideal as the latency is minimized.

## Step 4 : Create the server and client certificates for AWS Certificate Manager

We need to create the certificates for both the clients and the server. We are going to first generate the keys and the certificates locally on our computer and then uploading them to the Certificate Manager via either the web console or AWS CLI. 

> For now, this article only demonstrates how to create keys and certificates on computers running **Unix-like systems**. For how to create keys and certificates for AWS Certificate Manager on Windows, see **[this page](https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/client-authentication.html#windows)**. 

**To generate the server and client certificates and keys and upload them to ACM(AWS Certificate Manager)**

1. Open your favorite terminal emulator and select a directory you want to use. Clone the OpenVPN `easy-rsa` repo to your local computer and navigate to the `easy-rsa/easyrsa3` folder. 

    `$ git clone https://github.com/OpenVPN/easy-rsa.git`

    `$ cd easy-rsa/easyrsa3`

2. Initialize a new PKI environment.

    `$ ./easyrsa init-pki`

3. Build a new certificate authority(CA).

    `$ ./easyrsa build-ca nopass`

    Follow the prompts to build the CA.

4. Generate the server certificate and key.

    `$  ./easyrsa build-server-full server nopass`

5. Generate the client certificate and key.

    > **Make sure to save the client certificate and key because you will need them later to configure the client.**

    `$ ./easyrsa build-client-full client1.domain.tld nopass`

6. Copy the server certificate and key and the client certificate and key to a custom folder and then navigate into the custom folder.   

    Before you copy the certificates and keys, create the custom folder by using the `mkdir` command. The following example creates a custom folder in your home directory. 

    ```bash
    $ mkdir ~/custom_folder/
    $ cp pki/ca.crt ~/custom_folder/
    $ cp pki/issued/server.crt ~/custom_folder/
    $ cp pki/private/server.key ~/custom_folder/
    $ cp pki/issued/client1.domain.tld.crt ~/custom_folder
    $ cp pki/private/client1.domain.tld.key ~/custom_folder/
    $ cd ~/custom_folder/
	```
    You should be getting a directory layout like this:

    ```
    custom_folder
    ├── ca.crt
    ├── client1.domain.tld.crt
    ├── client1.domain.tld.key
    ├── server.crt
    └── server.key

    0 directories, 5 files
    ```

7. Go to **AWS Certificate Manager** on the web console.

    ![Find Certification Manager](find-certificate-manager.png)

    Click on **"Get Started"**.

    ![Click Get Started](get-started-acm.png)

8. Import the certificates for both the server and client.

    Click on **"Import a certificate"**.
    
    ![Click Import a certificate](import-a-certificate-acm.png)

    **To import the key and certificate for the server**

    > To view the content of these files, use your favorite text editor.
    > Simply use "TextEdit" if you are on macOS.

    - Copy the content of `server.crt` into the **1st** text field **"Certificate Body"**.

    - Copy the content of `server.key` into the **2nd** text field **"Certificate Private Key"**.

    - Copy the content of `ca.crt` into the **3rd** text field **"Certificate Chain"**

    - Click **"Next"** to proceed.

    ![import the key and certificate for the server](import-server-certificate.png)

    - Click **"Review and import"** on the next page.

    - And click **"Import"** to complete the process.

    **To do the same for the client**

    - Click **"Import a certificate"** on the next page.

    - Copy the content of `client1.domain.tld.crt` into the **1st** text field **"Certificate Body"**.

    - Copy the content of `client1.domain.tld.key` into the **2nd** text field **"Certificate Private Key"**.

    - Copy the content of `ca.crt` into the **3rd** text field **"Certificate Chain"**

    - Click **"Next"** to proceed.

    ![import the key and certificate for the client](import-client-certificate.png)

    - Click **"Review and import"** on the next page.

    - And click **"Import"** to complete the process.

    Now, you should be getting two available certificates returning to ACM's main page.

    ![final ACM console](acm-console.png)

We now have the certificates ready for our Client VPN Endpoints.


## Step 5 : Create the Client VPN Endpoint

Scroll down the page to find **"VPC"** under the category of **"Networking & Content Delivery"** and open the link. 

![the VPC item](vpc.png)

![the VPC console](vpn-console.png)

Find and open **"Client VPN Endpoints"** from the side panel on the left.

![Client VPN Endpoint](client-vpn-endpoint.png)

You should be on this page following the last action. 

![Client VPN Endpoint page](client-vpn-endpoint-page.png)

**To create a Client VPN Endpoint**

1. Click **"Create Client VPN Endpoint"** on the top.

2. Enter the friendly name you choose into the **"Name Tag"**. (Optional)

3. Write a description for your endpoint into the **"Description"**. (Optional)

4. Enter the Client IPv4 CIDR into the **"Client IPv4 CIDR"**

    > **Note that the IP address range cannot overlap with the target network or any of the routes that will be associated with the Client VPN endpoint. The client CIDR range must have a block size that is between /12 and /22 and not overlap with VPC CIDR or any other route in the route table. You cannot change the IP address range after you create the Client VPN endpoint.**

    The sample values are shown in the image below.

![VPN endpoint 1](vpn-endpoint-creation-1.png)

5. Select the server certificate we just created for **"Server certificate ARN"**. In this case, the name of our certificate is **"server"**.

![VPN endpoint 2](endpoint-select-server-certificate.png)

6. Check **"Use mutual authentication"**.

7. Select the client certificate we just created for **"Client certificate ARN"**. In this case, the name of the certificate is **"client1.domain.tld"**.

![VPN endpoint 3](endpoint-select-client-certificate.png)

8. Select **"No"** for **"Do you want to log the details on client connections?"**.

9. Leave blank the DNS server addresses and go to the next step.

10. Select **"UPD"** as the default transporting protocol.

11. Enable [**"Split Tunnel"**](https://en.wikipedia.org/wiki/Split_tunneling) to allow access to the resources in your own Local Area Network(LAN) while connected to the VPN.

    > The split-tunnel connection pushes the route table of the VPN endpoint to the client so that only part of the traffic goes through the VPN endpoint. 

12. Select the VPC from which the subnets will be associating with the endpoint.

13. Select **443** for **"VPN port"**.

14. Click **"Create Client VPN Endpoint"** to proceed.

    You then should be able to see this page. Click **"Close"** to go back to the **"Client VPN Endpoints"** panel.

    ![creation successful](vpn-endpoint-creation-2.png)

15. Now we go to the **"Authorization"** tab.

    ![authorization](endpoint-authorization.png)

16. Click **"Authorize Ingress"** to make a new rule.

17. Enter **"0.0.0.0/0"** for **"Destination network to enable"**.

    > In doing so, we authorize all the users with the certificate to connect to the endpoint, regardless of their public IP addresses. You can also enter a specific IP range in CIDR citation to authorize the users. For example, you may enter the IP range of your house to only allow the connections from there.

    ![make a new authorization](add-authorization-rule.png)

18. Click **"Add authorization rule"** to add the rule.

Now you have created a Client VPN Endpoint that is ready to go in your desirable AWS region.

## How to manage the Client VPN Endpoint

Now we need to know how to use the Client VPN Endpoint that we have just created. The VPN endpoint that we just created is not intended for common uses(encrypting the web traffic, hide your IP address...) as [mentioned previously](#What-are-AWS-and-AWS-Client-VPN-Endpoint?), so it may not be as convenient to manage as for ordinary users. Extra steps are needed to turn on/off the server. Let's now go through how to turn it **ON** and **OFF**.

**To turn ON the VPN server**

Because of the special nature of the Client VPN Endpoint, the server needs to be manually turned on and off. Though you can leave if on all the time, you will be billed more for the extra time when the endpoint is associated. We will be talking about the cost later in this article. 

To turn on the server, we need to first associate the target network with the endpoint and then create an extra route to enable the Internet access when connected to the endpoint.

- First, we go to the Client VPN Endpoint control panel.

    ![The Control Panel](client-vpn-endpoint-control-panel.png)

- Then we go to the **"Association"** tab under the selected VPN endpoint. This is where we manage the subnets associated with the endpoint. There should be no Client VPN Target Networks here.

    ![The association tab](association-tab.png)

- Click **"Associate"** to associate the endpoint with a target network(a VPC subnet). 

    1. Select the VPC where the target network is from.

    2. Select the subnet to associate with.

    3. Click **"Associate"** to make the association.

    ![Associate target network](associate-target-network.png)

    4. Click **"Close"** to return to the control panel.

        It usually takes less than ten minutes for the server to finish the association. So the endpoint status will not change immediately following this action.

    ![association success](association-success.png)

- Go back to the control panel and go to the **"Route Table"** tab.

    1. We are now going to modify the endpoint's route table, adding an additional rule that defines the flow of the internet traffic within the target network. By doing this, we can later access the internet when connected to the VPN endpoint.

    ![create one additional route](create-additional-route.png)

    2. Click **"Create Route"** on the side panel. 

    3. Enter **"0.0.0.0/0"** for **"Route destination"**, and select the subnet that you want to associate with the VPN endpoint. The **"Description"** is optional, so we are going to leave it blank for now.

    ![create additional route](create-additional-route-2.png)

    4. Click **"Create Route"** to proceed.

    ![finish creating the route](create-additional-route-3.png)

    You should be able to see two routes being created now.

    ![routes being created](routes-being-created.png)

- Now the subnet is being associated. And the state of the endpoint remains **"Pending-associate"** until the endpoint is ready to accept incoming connections. It usually takes less than 10 minutes to complete the association.

    When the endpoint is fully associated and 'turned on' in our case, the state of the endpoint will become **"Available"** with a green indicator next to the caption.

    ![endpoint available](endpoint-available.png)

    By the time it becomes ready, the endpoint is ready to establish connections with the clients. 

**To turn OFF the VPN server**

We now assume that the current state of the VPN endpoint is **"Available"**, which means that it is **"ON"** in our case. And the route table of the endpoint should contain two rules, one of which is an additional one that defines the flow of the internet traffic within the target network.

To **"turn off"** the server, we only need to disassociate the target subnet from the endpoint. The additional route that we created will be automatically deleted following the disassociation. However, that nature of the endpoint requires us to create the additional route every time when we try to turn on the server. 

The following section walks you through how to **"turn off"** of the server. **(disassociate the target subnet)**

- We first go to the control panel and navigate to the **"Association"** tab. 

    ![Association tab](to-disassociate-subnet.png)

- Select the one association that you see on the list by clicking the checkbox at the left of the row.

- And then click **"Disassociate"**.

    ![the Disassociation](to-disassociate-subnet-2.png)

- Click **"Yes, Disassociate"** to confirm the disassociation when being prompted. 
    
    ![Disassociation prompt](disassociation-prompt.png)

- By then we have just **"turned off"** the VPN service. You do not need to worry about the route we created as it is now being deleted automatically following the disassociation of the target network, as shown in the picture below. 

    ![Routes being deleted](deleting-routes.png)

- By then, we have successfully **"turned off"** the VPN server.

